// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                    @id @default(uuid())
  name              String
  email             String                    @unique
  password          String
  role              Role                      @default(FREE)
  ageCategory       AgeCategory?              @default(YOUNG_ADULT) // New field
  createdAt         DateTime                  @default(now())
  aiResponses       AiResponse[]
  chatMessages      ChatMessage[]
  checklistStatuses SummaryChecklistStatus[]
}

// Add new enum for age categories
enum AgeCategory {
  TEEN_YOUTH    // <17
  YOUNG_ADULT   // 18-25
  ADULT         // 26-59
  SENIOR        // 60+
}

model Summary {
  id                String                    @id @default(cuid())
  date              String                    @unique
  summary           String
  checklist         Json
  createdAt         DateTime                  @default(now())
  checklistStatuses SummaryChecklistStatus[]  // Changed from summaryChecklistStatuses
}

// The model name stays the same for database consistency
model SummaryChecklistStatus {
  id        String   @id @default(cuid())
  summaryId String
  userId    String
  checklist Json     // Array of {text: string, completed: boolean}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  summary   Summary  @relation(fields: [summaryId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([summaryId, userId]) // Ensure one status per user per summary
}

model AiResponse {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  input     String
  verse     String
  message   String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  FREE
  CONTRIBUTOR
}

model Verse {
  id        Int     @id @default(autoincrement())
  book      String
  chapter   Int
  verse     Int
  text      String

  @@index([book, chapter, verse])
  @@unique([book, chapter, verse])
}

model Reading {
  date           String   @id
  firstReference String
  firstContent   String
  psalmReference String
  psalmContent   String
  secondReference String?
  secondContent   String?
  gospelReference String
  gospelContent   String
}

model ChatMessage {
  id             String   @id @default(uuid())
  userId         String
  isUser         Boolean
  text           String
  verseReference String?
  verseText      String?
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}